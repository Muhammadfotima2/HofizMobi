# order_push_server.py
import os
import json
from flask import Flask, request, jsonify
import firebase_admin
from firebase_admin import credentials, messaging

# === Firebase Admin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ ENV ===
svc_json = os.environ.get("FIREBASE_SERVICE_ACCOUNT")
if not svc_json:
    raise RuntimeError("FIREBASE_SERVICE_ACCOUNT env var is missing")
cred = credentials.Certificate(json.loads(svc_json))
firebase_admin.initialize_app(cred)

app = Flask(__name__)

def send_push_to_admin(title: str, body: str, data: dict | None = None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ç–µ–º—É 'admin'."""
    msg = messaging.Message(
        notification=messaging.Notification(title=title, body=body),
        topic="admin",
        data={k: str(v) for k, v in (data or {}).items()},
        android=messaging.AndroidConfig(
            notification=messaging.AndroidNotification(channel_id="default_channel")
        ),
    )
    resp = messaging.send(msg)
    print("‚úÖ FCM sent (topic admin):", resp)
    return resp

def format_body(customer: str, phone: str, comment: str, total: str, currency: str) -> str:
    """–°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—Ä–∞—Å–∏–≤–æ, –±–µ–∑ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫"""
    lines = [
        f"–ò–º—è: {customer}",
        f"–ù–æ–º–µ—Ä: {phone}",
    ]
    if comment:  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –ø—É—Å—Ç–æ–π
        lines.append(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    lines.append(f"–°—É–º–º–∞: {total} {currency}")
    return "\n".join(lines)

@app.post("/send-order")
def send_order():
    """–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—à –≤ —Ç–µ–º—É 'admin'."""
    p = request.get_json(force=True, silent=True) or {}
    order_id = p.get("orderId", "N/A")
    customer = p.get("customerName", "–ö–ª–∏–µ–Ω—Ç")
    phone = p.get("phone", "‚Äî")
    comment = p.get("comment", "")
    total = p.get("total", 0)
    currency = p.get("currency", "TJS")

    title = "üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"
    body  = format_body(customer, phone, comment, total, currency)

    try:
        send_push_to_admin(title, body, {"orderId": order_id})
        return jsonify({"ok": True}), 200
    except Exception as e:
        print("‚ùå FCM error:", e)
        return jsonify({"ok": False, "error": str(e)}), 500

@app.post("/subscribe-token")
def subscribe_token():
    """–ü–æ–¥–ø–∏—Å–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π FCM-—Ç–æ–∫–µ–Ω –Ω–∞ —Ç–µ–º—É 'admin'."""
    p = request.get_json(force=True, silent=True) or {}
    token = p.get("token")
    if not token:
        return jsonify({"ok": False, "error": "no token"}), 400
    res = messaging.subscribe_to_topic([token], "admin")
    res_dict = getattr(res, '__dict__', {})
    return jsonify({"ok": True, "res": res_dict}), 200

@app.post("/send-to-token")
def send_to_token():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—à –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)."""
    p = request.get_json(force=True, silent=True) or {}
    token = p.get("token")
    title = p.get("title", "–¢–µ—Å—Ç")
    body  = p.get("body", "–ü—Ä–∏–≤–µ—Ç!")
    if not token:
        return jsonify({"ok": False, "error": "no token"}), 400
    msg = messaging.Message(
        notification=messaging.Notification(title=title, body=body),
        token=token,
        android=messaging.AndroidConfig(
            notification=messaging.AndroidNotification(channel_id="default_channel")
        ),
    )
    resp = messaging.send(msg)
    print("‚úÖ FCM sent (token):", resp)
    return jsonify({"ok": True, "resp": resp}), 200

@app.get("/")
def root():
    return "OK", 200

if __name__ == "__main__":
    port = int(os.environ.get("PORT", "8080"))
    app.run(host="0.0.0.0", port=port, debug=False)
