# order_push_server.py
import os
import json
import base64
from flask import Flask, request, Response

import firebase_admin
from firebase_admin import credentials, messaging

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin (—É—Å—Ç–æ–π—á–∏–≤–æ –∫ —Ä–∞–∑–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º –∫–ª—é—á–∞) ---
def _load_firebase_cred():
    """
    –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∫–ª—é—á –∏–∑:
    1) FIREBASE_SERVICE_ACCOUNT (RAW JSON)
    2) FIREBASE_SERVICE_ACCOUNT_B64 (base64 –æ—Ç JSON)
    3) serviceAccountKey.json (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª ‚Äî –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    """
    raw = os.environ.get("FIREBASE_SERVICE_ACCOUNT")
    b64 = os.environ.get("FIREBASE_SERVICE_ACCOUNT_B64")

    # 1) RAW JSON –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if raw:
        try:
            data = json.loads(raw)
            return credentials.Certificate(data)
        except Exception as e:
            print("‚ö†Ô∏è  FIREBASE_SERVICE_ACCOUNT: –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON:", e)

    # 2) base64 JSON –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if b64:
        try:
            decoded = base64.b64decode(b64).decode("utf-8")
            data = json.loads(decoded)
            return credentials.Certificate(data)
        except Exception as e:
            print("‚ö†Ô∏è  FIREBASE_SERVICE_ACCOUNT_B64: –Ω–µ —Å–º–æ–≥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON:", e)

    # 3) –§–∞–π–ª (–ª–æ–∫–∞–ª—å–Ω–æ)
    if os.path.exists("serviceAccountKey.json"):
        try:
            return credentials.Certificate("serviceAccountKey.json")
        except Exception as e:
            print("‚ö†Ô∏è  serviceAccountKey.json –Ω–∞–π–¥–µ–Ω, –Ω–æ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è:", e)

    raise RuntimeError(
        "–ù–µ –Ω–∞–π–¥–µ–Ω Firebase service account. "
        "–ó–∞–¥–∞–π—Ç–µ ENV FIREBASE_SERVICE_ACCOUNT (RAW JSON) –∏–ª–∏ FIREBASE_SERVICE_ACCOUNT_B64 (base64 JSON), "
        "–∏–ª–∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª serviceAccountKey.json."
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∏–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ gunicorn)
if not firebase_admin._apps:
    cred = _load_firebase_cred()
    firebase_admin.initialize_app(cred)

app = Flask(__name__)

def send_push_to_admin(title: str, customer: str, phone: str, comment: str, total: str, currency: str, data: dict | None = None):
    # –¢–µ–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    lines = []
    if customer:
        lines.append(f"üë§ –ò–º—è: {customer}")
    if phone:
        lines.append(f"üìû –ù–æ–º–µ—Ä: {phone}")
    if comment:
        lines.append(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    if total:
        lines.append(f"üíµ –°—É–º–º–∞: {total} {currency}")
    body_text = "\n".join(lines) if lines else "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑"

    msg = messaging.Message(
        notification=messaging.Notification(title=title, body=body_text),
        topic="admin",
        data={k: str(v) for k, v in (data or {}).items()},
        android=messaging.AndroidConfig(
            notification=messaging.AndroidNotification(channel_id="orders_high")
        ),
    )
    resp = messaging.send(msg)
    print("‚úÖ FCM sent (topic=admin):", resp)
    return resp

@app.post("/send-order")
def send_order():
    p = request.get_json(force=True, silent=True) or {}

    order_id = p.get("orderId", "N/A")
    customer = p.get("customerName", "–ö–ª–∏–µ–Ω—Ç")
    phone = p.get("phone") or p.get("phoneNumber") or p.get("number") or "‚Äî"
    comment = p.get("comment", "")
    total = str(p.get("total", ""))  # —Å—Ç—Ä–æ–∫–∞
    currency = p.get("currency", "TJS")
    title = "üíº –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"

    try:
        send_push_to_admin(
            title=title,
            customer=customer,
            phone=phone,
            comment=comment,
            total=total,
            currency=currency,
            data={"orderId": order_id}
        )
        return Response(json.dumps({"ok": True}, ensure_ascii=False),
                        content_type="application/json; charset=utf-8")
    except Exception as e:
        print("‚ùå FCM error:", e)
        return Response(json.dumps({"ok": False, "error": str(e)}, ensure_ascii=False),
                        status=500, content_type="application/json; charset=utf-8")

@app.post("/subscribe-token")
def subscribe_token():
    p = request.get_json(force=True, silent=True) or {}
    token = p.get("token")
    if not token:
        return Response(json.dumps({"ok": False, "error": "no token"}, ensure_ascii=False),
                        status=400, content_type="application/json; charset=utf-8")
    res = messaging.subscribe_to_topic([token], "admin")
    res_dict = getattr(res, '__dict__', {})
    return Response(json.dumps({"ok": True, "res": res_dict}, ensure_ascii=False),
                    content_type="application/json; charset=utf-8")

@app.post("/send-to-token")
def send_to_token():
    p = request.get_json(force=True, silent=True) or {}
    token = p.get("token")
    title = p.get("title", "–¢–µ—Å—Ç")
    customer = p.get("customer", "‚Äî")
    phone = p.get("phone") or p.get("phoneNumber") or p.get("number") or "‚Äî"
    comment = p.get("comment", "")
    total = str(p.get("total", ""))
    currency = p.get("currency", "TJS")

    if not token:
        return Response(json.dumps({"ok": False, "error": "no token"}, ensure_ascii=False),
                        status=400, content_type="application/json; charset=utf-8")

    lines = []
    if customer:
        lines.append(f"üë§ –ò–º—è: {customer}")
    if phone:
        lines.append(f"üìû –ù–æ–º–µ—Ä: {phone}")
    if comment:
        lines.append(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
    if total:
        lines.append(f"üíµ –°—É–º–º–∞: {total} {currency}")
    body_text = "\n".join(lines) if lines else "–°–æ–æ–±—â–µ–Ω–∏–µ"

    msg = messaging.Message(
        notification=messaging.Notification(title=title, body=body_text),
        data={
            "title": title,
            "body": body_text,
            "customer": customer,
            "phone": str(phone),
            "comment": comment,
            "total": str(total),
            "currency": currency
        },
        token=token,
        android=messaging.AndroidConfig(
            notification=messaging.AndroidNotification(channel_id="orders_high")
        ),
    )
    resp = messaging.send(msg)
    print("‚úÖ FCM sent (token):", resp)
    return Response(json.dumps({"ok": True, "resp": resp}, ensure_ascii=False),
                    content_type="application/json; charset=utf-8")

@app.get("/health")
def health():
    return Response("OK", content_type="text/plain; charset=utf-8")

@app.get("/")
def root():
    return Response("OK", content_type="text/plain; charset=utf-8")

if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: python order_push_server.py
    port = int(os.environ.get("PORT", "8080"))
    app.run(host="0.0.0.0", port=port, debug=False)
